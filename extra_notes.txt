Refactor code written before adding more code
Refactoring simplifies the structure of the code you've already written, making it easier to build on
check_events() method and update_screen method are helper methods
We break run_game() method which is getting lengthy, into two helper methods
helper method does work inside a class but isn't meant to be called through an instance


single leading underscore indicates a helper method

figure out how many elements fit in a row, need to look at how much horizontal space we have
we need an emptpy margin on either side of the screen 
we'll make this margin the width of one alien, but because we have two margins, the available space for aliens is the screen width
minus two alien widths: available_space_x = settings.screen_width - (2 * alien_width) --> blank spaces on edges of horizontal screen, so aliens
not right on borders

we also need to set spacing between aliens; we'll make it one alien width. The space needed to display one alien is twice its width: one width for the alien and one width
for the empty space to its right
to find the number of aliens that fit across the screen, we divide the available space by two time the width of an alien
we use floor division (//) which divides two numbers and drops any remainder, o that we'll get an integer number of aliens!
number_aliens_x = available_space_x // (2*alien_width)

to finish fleet, we determine number of rows that fit on the screen then repeat the loop for creating the aliens in one row until we have the correct number of rows
to determine number of rows, we find the available vertical space by subtracting the alien height form the top, the ship height from the bottom,
and two alien heights from the bottom of the screen-->
available_space_y = settings.screen_height - (3 * alien_height) - ship height
result will be some empty space above the ship, so play has some time to start shooting aliens at the beginning of each level
each row needs some empty space below it, which we'll make equal to the height of one alien
to find the number of rows, we divide the available space by two times the height of an alien (space below alien and alien itself)
use floor division because we can only make an integer number of rows
number_rows = available_space_y // (2 * alien_height)
